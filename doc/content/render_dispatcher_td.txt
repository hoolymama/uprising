---
title: Maya Dispatcher (TD)
description: Configure renderDispatcher to send tasks from Maya to Pixar's Tractor
type: Tutorial
---

<% @figure_counter = 1 %>

h3(#contents). Contents

"Introduction":render_dispatcher_td.html#introduction
"Tractor":render_dispatcher_td.html#tractor
"Structure":render_dispatcher_td.html#structure
"Structure in the UI":render_dispatcher_td.html#structure-in-the-ui
"Expansion":render_dispatcher_td.html#expansion
"System File Configuration":render_dispatcher_td.html#system-file-configuration
"Job Configuration":render_dispatcher_td.html#job-configuration
"Prep Task":render_dispatcher_td.html#prep-task
"Clump Task":render_dispatcher_td.html#clump-task
"Frame Task":render_dispatcher_td.html#frame-task
"Commands":render_dispatcher_td.html#commands


h3(#introduction). Introduction

The Uprising plugin provides *renderDispatcher*, a Maya dependency graph node to submit jobs to Tractor for farm rendering. It is designed to be flexible for TDs and intuitive for artists. 

This guide deals with use of the dispatcher for TDs. If instead you want to use the dispatcher to render a shot, please see the "Guide for Artists":render_dispatcher_artist.html


h3(#tractor). Tractor

The Uprising renderDispatcher is at its core a Tractor scripting environment. It creates job scripts that are spooled to Tractor. As such it is important to understand a bit about the structure and syntax of these scripts.

h4. Resources

If you haven't done so already, please read the "Tractor Scripting Language Summary":https://renderman.pixar.com/resources/current/Tractor_1/scripting.html
You may also want to refer to the documentation on "Tractor Scripting Operators":https://renderman.pixar.com/resources/current/Tractor_1/scriptingOperators.html

While working through this documentation you are also encouraged to look at existing preset renderDispatchers which you can find by choosing Litter -> Uprising -> Load Central Preset. Start with the arnold.ma preset. 

To see the resulting job scripts created by these presets, press the *View Spool* button in the attribute editor. A window will appear with a job script in each tab, one per layer. This is the script that is sent to Tractor and it is the best place to understand and debug the configuration. 

h3(#structure). Structure

The renderDispatcher node makes very few assumptions about the jobs being submitted. For example it can be configured to send render jobs, simulations, mine bitcoins, or send tweets. The only thing it imposes is the task structure.

A Tractor job script is a DAG graph where nodes in the graph are tasks, and where the edges connecting them are dependency relationships. Although Tractor can handle many complex task structures, this renderDispatcher makes Tractor job scripts with a specific structure geared towards rendering frames and if necessary exporting the intermediate files to be rendered.

<hr>
<%= figure_tag('Task Graph', 'Job contains Frame tasks, Clump tasks, and a Prep task.','images/structure.jpg','left') %>
<hr>

The dependency structure has 3 types of task. Prep, Clump, and Frame. Frame tasks depend on Clump tasks and Clump tasks depend on the Prep task.

h4. Prep Task

There is one Prep task, and it must complete before any other tasks can run. Therefore it is handy for preparing the file-system and sending notifications that the job has started.

h4. Clump Task

There will be one or more Clump tasks generated according to the clump size attribute. Clump tasks are typically used for exporting intermediate 
files like *ass* or *rib*.

h4. Frame Task

Each Clump task is a dependency of one or more Frame tasks. Frame tasks will typically contain commands to render the files generated by clump tasks.

bq..  *Empty Tasks:*
As mentioned in the Tractor scripting documentation, it is valid to have tasks with no commands attached. The Mental Ray For Maya preset for example has Frame tasks with no render commands in them. This is because rendering is done directly in the Clump tasks.




h3(#structure-in-the-ui). Structure in the UI

The renderDispatcher attribute editor has a TD Attributes section in which you'll find the following 5 color-coded sections:


<hr>
<%= figure_tag('TD Attributes', 'The five TD sections are templates where the different types of task are configured','images/ae_td_collapsed.jpg','left') %>
<hr>


You can think of these sections as templates that are resolved when the job is submitted. For example, there will be many Frame tasks generated in the final job script, each rendering a different image. Therefore each task will need to know the frame number it is rendering in order to build filenames and to set the task title in the Tractor dashboard. This is achieved with a token called @<frame>@ which is converted to its literal value for each task when the job script is generated. The process of converting tokens to values is called expansion and is explained in detail below.

h3(#expansion). Expansion

In order to simplify the process of generating commands and options, you can use variables and expressions which will be expanded out in the job scripts. All string fields in the color coded sections above support expansion. 

h4. To see how expanding variables works:

* Create a new empty renderdispatcher.
* Set Frame Range to CurrentFrame
* In the Job Config section, enter the following in the title field: @<layer>_<shortname>_<framespec>_${USER}@
* Press *View Spool*

In the window that appears you'll see the expanded job title.

bc. defaultRenderLayer_c4__tumbleDryer__003__007__chartDev_1225-1225x1_julian-m#0

If you need to enter a longer expression you can click the small arrow to pop out an edit window.

<hr>
<%= figure_tag('Edit Field Window', 'Notice the insert menu. It contains shortcuts to insert tokens into the expression you are building','images/edit_field.jpg','left') %>
<hr>

h4. Expansion Strategies

There are 3 different strategies available for expanding strings.

# Envronment Variable Expansion
# Token Replacement
# Python Evaluation

h4. Examples..

bc. Environment Variable Expansion..
Expression: $HOME/shake_${SHAKE_VERSION}_scripts/
Resolves to: /usr/people/julian-m/shake_4.10.0606_scripts/

bc. Token Replacement..
Expression: [AR][<layer>][<shortname>][F<length>(<framespec>)]
Resolves to: [AR][defaultRenderLayer][c4__knock_over__start__v001__t006][F600(1-600x1)]

bc. Python Evaluation..
Expression: `kick -nstdin -i %s/renderData/%s_%s.%04d.ass" % (projectpath, shortname, layername, int(frame))`
Resolves to: kick -nstdin -i /jobs/channel4Pitch_1800359/rnd/mocap/maya/renderData/c4__knock_over__start__v001__t006_masterLayer.0001.ass

h4. Tokens

You'll notice that both the *Token Replacement* and *Python Evaluation* strategies make use of tokens. Tokens are variables that define a context in which expansion happens. They are composed of lowercase letters only. There are predefined tokens that the system provides. In addition users may may define custom tokens. Tokens fall into three scope categories and are listed below under headings for those scopes.

h5. Available in all sections

* @user@ - The user's login name
* @timestamp@ - A unique timestamp of the form YYYY_MM_DD_HH_MM_SS to identify the moment the submission button was pressed. If many render layers are being submitted they will all share the same timestamp.
* @length@ - Frame count for the entire job.
* @dispatcher@ - The node name of the dispatcher.
* @shortname@ - The name of the current scene without the directory. 
* @layer@ - The name of the current layer node.
* @layername@ - Same as *layer* except the defaultRenderLayer is changed to masterLayer.
* @projectpath@ - Current project, This is set to $MAYA_PROJECT if it exists, or to the last workspace in the workspace array. 
* @uprisingpath@ - Path to the Uprising installation being used.
* @plugins@ - List of Maya plugins in use.
* @priority@ - The priority as set in the artist section of the UI.
* @renderer@ - The current renderer as set in Render Settings.
* @framespec@ - A string that specifies the frame range. e.g. 1-10x2

h5. Available in Clump and Frame tasks.

* @clumpregular@ - Indicates whether the clump frames are regular (1) or irregular (0). A regular clump can be defined by a start, end and step. An irregular clump is an unstructured list of frames.   
* @clump@ - The clump as a string for display purposes only. e.g. "1-10x4" (regular) or "1~irregular~10" (irregular)
* @clumpcompact@ - Comma separated frame values. If the clump is regular then then *clumpcompact* will be three values representing start end and step - for example 1,10,2. If irregular, then it will be a comma separated list of all frames.
 * @clumplength@ - Frame count for the clump.
* @clumpstart@ - Only available for regular clumps. First frame of the clump.
* @clumpend@ - Only available for regular clumps. Last frame of the clump.
* @clumpstep@ - Only available for regular clumps. Step value of the clump.

h5. Available in Frame tasks.

* @frame@ - The frame number unpadded
* @framefour@ - The frame number with four padding ####. To get other padding values you will need to format the frame number with python as described further down.

h4. User Tokens.

In addition to the above tokens, you may define custom tokens using the *Add Token* button in the attribute editor. User defined tokens appear in the Extra Attributes section of the attribute editor and are valid in all sections. 

You can use any of the predefined tokens from the *everywhere* section above to construct values for user defined tokens. This helps to keep your configuration "DRY.":http://en.wikipedia.org/wiki/Don%27t_repeat_yourself For example, you may create a token to hold the job title from the example above, and then use it for both the title in Tractor's dashboard and in the subject of a notification email.

The attribute name for user defined tokens will be prefixed with @utoken_@. The part after the underscore should be all lowercase letters and will be the token name you will refer too in expressions. 

bc. arnoldRenderDispatcher.utoken_jobtitle = [AR][<layer>][<shortname>][F<length>(<framespec>)]
arnoldRenderDispatcher.jobTitle = <jobtitle>

h4. Environment Variable Expansion

The expander algorithm will expand environment variables of the form @$VAR@ or @${VAR}@. If the variable does not exist then no expansion will take place and no error will be thrown. The variable will be left untouched.

h4. Token Replacement

Token replacement is achieved by enclosing a token in angle brackets. If the parser sees an open angle bracket @<@ it will try to resolve the following token and will throw an error if it fails to find a valid one followed by a closing angle bracket @>@. For example:

bc. Looks like '<jobtitles>' contains an invalid token
Valid tokens are: ['layer', 'layername', 'projectpath', 'timestamp', u'jobtitle', .....  'renderer']
# Error: KeyError: .... jobtitles #

If you want to have a literal open angle-bracket in your job script file, you can put an extra angle bracket in front to escape it like so @<<@.

h4. Python Evaluation

The final step in the expansion is to evaluate python code. You specify that the string contains python code by enclosing it in back-ticks like so: @`code goes here`@ Currently, only the entire string may be treated as python. If the first and last characters are not back-ticks, no python evaluation will occur.

During python evaluation, all the above token/value pairs that are in scope are treated as python variables. This allows you to exploit all of Python's string manipulation functions like case changes and formatting functions.



h3(#system-file-configuration). System File Configuration

When you press the *Submit* button, the following actions take place for each layer.

* The current scene is saved to disk.
* A job script is generated and saved to disk.
* The Tractor executable is invoked with the job script as an argument.

The paths for these files are specified here in the System Files section of the attribute editor.

<hr>
<%= figure_tag('System Files', '','images/system_files.jpg','left') %>
<hr>

You can save the scene and job script wherever you like of course, but for this discussion the reasoning behind the above example is explained.

In figure <%= @figure_counter - 1 %> you can see that the Maya scene filename does not have a *layername* token. This means the path will be the same for all layers, which is fine because there's no point in saving the same scene for each layer and the renderDispatcher will not overwrite an existing file.

The job script path on the other hand will cause a job script to be saved with a different name for each layer as desired. 

You will also notice the use of a token called @perishablepath@. This is a user defined token that defines a directory that can be thrown away at a later date to reclaim disk space. It is equivalent to:

bc. <projectpath>/renderData/<user>/<shortname>/<timestamp>


h3(#job-configuration). Job Configuration

The Job Configuration section of the attribute editor provides access to the "settings for a Tractor job object.":https://renderman.pixar.com/resources/current/Tractor_1/scriptingOperators.html#job 

This discussion is concerned with implementation of these settings in the renderDispatcher UI. It does not attempt to describe what the settings mean to Tractor.

Clump and Frame tokens are not valid in this scope.

h4. Job Options

<hr>
<%= figure_tag('Simple Job Options', '','images/job_options.jpg','left') %>
<hr>

The options shown in figure <%= @figure_counter - 1 %> are the simple options that can be easily formulated with a single string field. Although some options could in theory be coerced into an appropriate type, like atleast and atmost to integers, this is not implemented in the UI because it would stop you from using expansion expressions.

h4. Job Init

<hr>
<%= figure_tag('Job Init Section', '','images/job_init.jpg','left') %>
<hr>

The init section of a job script is a Pixar implementation feature designed to allow a form of variable substitution. You define key/value pairs and you can use those keys in the script to cut down on long filenames. However, the keys are only in scope within tasks, which is pretty annoying, and as we already have a variable substitution scheme there is not really much need to use this feature. 

If you do use it, and accidentally try to use the keys out of task scope, then the job will not be accepted by Tractor and you wont be given any indication of why that is. Be warned.


h4. Job Metadata

<hr>
<%= figure_tag('Job Metadata Section', '','images/job_metadata.jpg','left') %>
<hr>

The metadata section in renderDispatcher is implemented as a list of key/value pairs, similar to the init section. However, unlike *init* it is not a requirement by Tractor. In fact, when the job is spooled, the metadata is serialized into a string. In the above example it looks like this:

bc. -metadata {
	SECTOR=advertising, TPF=00:00, SHOT=rnd/rnd_sequence, SHOW=mpc3dRnd_1800328, SCENE=rnd, NF=21, P=100, LLID=000, JOBTYPE=arnold, TDNAME=julian-m
}

p. of a job script . You define key/value pairs and you can use those keys in the script to cut down on long filenames. However, the keys are only in scope within tasks, which is pretty annoying, and as we already have a variable substitution scheme there is not really much need to use this feature. 

If you do use it, and accidentally try to use the keys out of task scope, then the job will not be accepted by Tractor and you won't be given any indication of why that is. Be warned.


 h4. Job Commands

A Job has two kinds of command: Postscript and Cleanup. They are structurally identical to task commands. For example, they have the same options, can be run local or remote, and there can be many of them. See the section on commands below.

h3(#prep-task). Prep Task

The Prep Task section is intended for preparing the file system. It is also a good place to send an automatic notification to producers or render wranglers to let them know the job has started. Only one Prep Task will be generated in the job script. It runs before clump and frame tasks. Clump and Frame tokens are not valid in this scope.

Like all tasks, the Prep Task section gives access to the full set of Tractor's task options.

In the example in figure <%= @figure_counter %>, it has one command that calls a shell script *uprisingLatestDir.sh.* This script makes a timestamped directory in renderData  with a *latest* symbolic link.

<hr>
<%= figure_tag('Prep Task', '','images/prep_task.jpg','left') %>
<hr>

h3(#clump-task). Clump Task

The Clump Task section is intended for writing intermediate files like ass, mi, or rib. Clump tokens are valid in this scope, which allows you to build commands for the clump range. You can see in figure <%= @figure_counter %> we call Maya in batch to export ass files for a clump. These commands will be explained in greater detail in the *commands* section below.

<hr>
<%= figure_tag('Clump Task', '','images/clump_task.jpg','left') %>
<hr>

h3(#frame-task). Frame Task

The Frame Task section is intended for rendering images. Clump and Frame tokens are valid in this scope. You can see in figure <%= @figure_counter %> we call *kick* to render ass files that were created by the clump tasks. These commands will be explained in greater detail in the commands section below.

<hr>
<%= figure_tag('Frame Task', '','images/frame_task.jpg','left') %>
<hr>


h3(#commands). Commands

The best way to learn about configuring commands is to refer to some existing presets. The Arnold preset for example has commands to export ass files and render them. However, it is also set up to collate log files and send a "job-done" notification email, which links to visual charts showing memory usage, render times and more.

You can find an in-depth look at the "Arnold Dispatcher configuration here":arnold_maya_preset.html

h3(#done). Done

A detailed description of RenderDispatcher attributes can be found in the "node documentation":renderDispatcher.html.


Have Fun!
