import sys
import json

import logging

import tkinter as tk
import ropy.logger_setup
logger = logging.getLogger('robopy')


class Param(object):

    def __init__(self, root, **kw):
        self._label = tk.Label(root, text=kw.get("label", "Label"))
        self._label.grid(column=0, sticky="W")
        self._row = int(self._label.grid_info()["row"])


    def _clamp(self, value):
        if self._min is not None:
            value = max(self._min, value)
        if self._max is not None:
            value = min(self._max, value)
        return value


class FloatParam(Param):

    def __init__(self, root, **kw):
        super().__init__(root, **kw)

        self._min = kw.get("min")
        self._max = kw.get("max")
        self._variable = tk.DoubleVar()

        self.entry = tk.Entry(root, textvariable=self._variable)
        self.entry.grid(row=self._row, column=1)

        value = kw.get("value", 0.0)
        self._variable.set(self._clamp(value))


    def get(self):
        return  int(self._variable.get())

    def set(self, value):
        self._variable.set(self._clamp(value))


class IntParam(Param):

    def __init__(self, root, **kw):
        super().__init__(root, **kw)

        self._min = kw.get("min")
        self._max = kw.get("max")
        self._variable = tk.IntVar()

        self.entry = tk.Entry(root, textvariable=self._variable)
        self.entry.grid(row=self._row, column=1)

        value = kw.get("value", 0)
        self._variable.set(self._clamp(value))

    def get(self):
        return  int(self._variable.get())

    def set(self, value):
        self._variable.set(self._clamp(value))
