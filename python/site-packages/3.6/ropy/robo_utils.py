import sys
import json

import logging
from robolink import Robolink, ITEM_TYPE_ROBOT, ITEM_TYPE_TARGET
from robodk import *
import ropy.tk_params
import ropy.logger_setup
import tkinter as tk
import importlib

RDK = Robolink()

HOME_JOINTS = [0, -90, 90, 0, 0, 0]

logger = logging.getLogger('robopy')


def show_in_messagebox(thing, title="Thing"):
    if isinstance(thing, list):
        text = "\n".join([item for item in thing])
    if isinstance(thing, dict):
        text = "\n".join(["%s = %s" % (k, v) for k, v in thing.items()])
    else:
        text = thing
    tk.messagebox.showinfo(title, text)


def print_selection():
    for item in RDK.Selection():
        logger.debug(item.Name())


def go_canvas_approach():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    pose = RDK.Item('a').Pose()
    robot.setPose(pose)


def go_home():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    robot.setJoints(HOME_JOINTS)


# def addGeo():
#     points = []
#     points.append([1000, 0, -1000])
#     points.append([1000, 1000, -1000])
#     points.append([0, 1000, -1000])
#     RDK.AddShape(points)


def touchTargets():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    robot.setJoints([0, 0, 0, 0, 0, 0])

    target = RDK.Item('southTestTarget1')
    robot.MoveJ(target)
    target = RDK.Item('southTestTarget2')
    robot.MoveL(target)
    target = RDK.Item('southTestTarget3')
    robot.MoveL(target)
    target = RDK.Item('southTestTarget4')
    robot.MoveL(target)


def build(node, parent=0):
    if node["type"] == "grp":
        item = RDK.AddFrame(node["name"], itemparent=parent)
        pose = Mat(node["matrix"])
        item.setPose(pose)
        item.setVisible(False, visible_frame=False)
        for child in node["children"]:
            build(child, parent=item)
    elif node["type"] == "stl":
        item = RDK.AddFile(node["filename"], parent=parent)
        item.setColor(list(node["color"]))
        item.setVisible(True, visible_frame=False)
    elif node["type"] == "locator":
        item = RDK.AddTarget(node["name"], itemparent=parent)
        pose = Mat(node["matrix"])
        item.setPose(pose)
        item.setVisible(True, visible_frame=True)
    else:
        pass


def import_model():

    fn = getOpenFile(path_preference='/Users/julian/projects/robot/data/')
    if not fn:
        return
    try:
        data = json.load(open(fn))
    except IOError as ex:
        messagebox.showinfo("Error", ex.message)

    for node in data:
        build(node)


def local_rotate_offset(pose, x, y=0, z=0):
    return pose * rotx(x * pi / 180.0) * \
        roty(y * pi / 180.0) * rotz(z * pi / 180.0)


def draw_polygon():
    pass


def exercise():

    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    cone_angle = 11.25

    center_pose = robot.Pose()

    pose = local_rotate_offset(center_pose, cone_angle, cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, -cone_angle, cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, -cone_angle, -cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, cone_angle, -cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, 0, 0, 90)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, 0, 0, -90)
    robot.MoveL(pose)
    robot.MoveL(center_pose)


def walk_selected():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    for i, item in enumerate(RDK.Selection()):
        if i:
            robot.MoveL(item)
        else:
            robot.MoveJ(item)
    reset()


def linear_to_selected():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    for i, item in enumerate(RDK.Selection()):
        robot.MoveL(item)

    reset()


def pose_info():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    robot_joints = robot.Joints()
    robot_position = robot.SolveFK(robot_joints)
    robot_config = robot.JointsConfig(robot_joints)

    logger.debug("----------------------")
    logger.debug("JOINTS")
    logger.debug(robot_joints)
    logger.debug("POSITION")
    logger.debug(robot_position)
    logger.debug("CONFIG")
    logger.debug(robot_config)
    logger.debug("----------------------")


def _get_joints_info(target):
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    robot.setPose(target.Pose())
    # joints = 
    # joints = robot.SolveIK(target.Pose())
    config = robot.JointsConfig(joints)
    return (joints, config)
 

def linear_move_check():
    robot = RDK.Item('', ITEM_TYPE_ROBOT)
    items = RDK.Selection()
    nitems = len(items)

    # items = RDK.Selection()
    if len(items) == 2:
        logger.debug("-----------MOVEL_TEST----------")
        logger.debug("2 Items")
        # src_joints, src_config = _get_joints_info(items[0])
        src_joints = items[0].Joints()
        pose = items[1].Pose()
        logger.debug(src_joints)
        result = robot.MoveL_Test(src_joints, pose)
        logger.debug("LINEAR POSSIBLE")
        logger.debug(result)
    else:
        logger.debug("Wrong Number Items %d" % len(items))
    # for i, item in enumerate(RDK.Selection()):
    #     if i < (nitems-1):
    #         next_item = items[(i+1)]
    #         src_joints, src_config = _get_joints_info(item)
    #         dest_joints, dest_config = _get_joints_info(next_item)

    #         logger.debug("-------COMPARE--------")
    #         logger.debug(item.Name())
    #         logger.debug(src_config)
    #         logger.debug(next_item.Name())
    #         logger.debug(dest_config)
    #         if src_config == dest_config:
    #             logger.debug("MATCH!!")
    #         else:
    #             logger.debug("NOT MATCH :(")
                
    #         logger.debug("---------------")


def tools():

    root = tk.Tk()
    root.title("Tools")
    tk.Button(root, text='Home', command=go_home).pack()
    tk.Button(root, text='Canvas approach', command=go_canvas_approach).pack()

    tk.Button(root, text='Print selection', command=print_selection).pack()
    tk.Button(root, text='Import model', command=import_model).pack()

    tk.Button(root, text='Walk selected targets', command=walk_selected).pack()
    tk.Button(root, text='Linear move to selected',
              command=linear_to_selected).pack()

    tk.Button(root, text='CurrentPoseInfo',
              command=pose_info).pack()

    tk.Button(root, text='Linear Possible',
              command=linear_move_check).pack()

    # Important to display the graphical user interface
    root.mainloop()


# /usr/local/bin/python3.6
# /Users/julian/bin/subl -n -w
