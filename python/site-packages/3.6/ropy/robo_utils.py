import sys
import json
import re
import fileinput
import logging
from robolink import Robolink, ITEM_TYPE_ROBOT, ITEM_TYPE_TARGET, ITEM_TYPE_TOOL
from robodk import *
import ropy.tk_params
import ropy.logger_setup
import tkinter as tk
import importlib

RL = Robolink()

HOME_JOINTS = [0, -90, 90, 0, 0, 0]

logger = logging.getLogger('robopy')


def show_in_messagebox(thing, title="Thing"):
    if isinstance(thing, list):
        text = "\n".join([item for item in thing])
    if isinstance(thing, dict):
        text = "\n".join(["%s = %s" % (k, v) for k, v in thing.items()])
    else:
        text = thing
    tk.messagebox.showinfo(title, text)


def print_selection():
    for item in RL.Selection():
        logger.debug(item.Name())


def go_canvas_approach():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    pose = RL.Item('a').Pose()
    robot.setPose(pose)


def go_home():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    robot.setJoints(HOME_JOINTS)


# def addGeo():
#     points = []
#     points.append([1000, 0, -1000])
#     points.append([1000, 1000, -1000])
#     points.append([0, 1000, -1000])
#     RL.AddShape(points)


def touchTargets():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    robot.setJoints([0, 0, 0, 0, 0, 0])

    target = RL.Item('southTestTarget1')
    robot.MoveJ(target)
    target = RL.Item('southTestTarget2')
    robot.MoveL(target)
    target = RL.Item('southTestTarget3')
    robot.MoveL(target)
    target = RL.Item('southTestTarget4')
    robot.MoveL(target)


def build(node, parent=0):
    if node["type"] == "grp":
        item = RL.AddFrame(node["name"], itemparent=parent)
        pose = Mat(node["matrix"])
        item.setPose(pose)
        item.setVisible(False, visible_frame=False)
        for child in node["children"]:
            build(child, parent=item)
    elif node["type"] == "stl":
        item = RL.AddFile(node["filename"], parent=parent)
        item.setColor(list(node["color"]))
        item.setVisible(True, visible_frame=False)
    elif node["type"] == "locator":
        item = RL.AddTarget(node["name"], itemparent=parent)
        pose = Mat(node["matrix"])
        item.setPose(pose)
        item.setVisible(True, visible_frame=True)
    else:
        pass


def import_model():

    fn = getOpenFile(path_preference='/Users/julian/projects/robot/data/')
    if not fn:
        return
    try:
        data = json.load(open(fn))
    except IOError as ex:
        messagebox.showinfo("Error", ex.message)

    for node in data:
        build(node)


def tool_instruction(tool):
    [x, y, z, r, p, w] = pose_2_xyzrpw(tool.PoseTool())
    return '$TOOL = {FRAME: X %.3f,Y %.3f,Z %.3f,A %.3f,B %.3f,C %.3f}' % (
        x, y, z, w, p, r)


def fix_tool_commands():

    fn = getOpenFile(path_preference='/Users/julian/projects/robot/programs/')
    if not fn:
        return

    # get the tools
    tools = dict((x.Name(), tool_instruction(x))
                 for x in RL.ItemList(ITEM_TYPE_TOOL))

    regstr = ("|").join(tools.keys())
    regex = re.compile(r"; Show (%s)" % regstr)

    for line in fileinput.input(fn, inplace=True):
        m = regex.match(line)
        if m:
            tool_name = m.group(1)
            tool_statement = tools[tool_name]
            print( tool_statement, end='')
            print(line, end='')
        elif line.startswith("$VEL.CP = 1.00"):
            print("$VEL.CP = 0.70000")
        elif line.startswith("$VEL.CP = 0.05"):
            print("$VEL.CP = 0.30000")
        else:
            print(line, end='')


def local_rotate_offset(pose, x, y=0, z=0):
    return pose * rotx(x * pi / 180.0) * \
        roty(y * pi / 180.0) * rotz(z * pi / 180.0)


def draw_polygon():
    pass


def exercise():

    robot = RL.Item('', ITEM_TYPE_ROBOT)
    cone_angle = 11.25

    center_pose = robot.Pose()

    pose = local_rotate_offset(center_pose, cone_angle, cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, -cone_angle, cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, -cone_angle, -cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, cone_angle, -cone_angle)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, 0, 0, 90)
    robot.MoveL(pose)
    robot.MoveL(center_pose)
    pose = local_rotate_offset(center_pose, 0, 0, -90)
    robot.MoveL(pose)
    robot.MoveL(center_pose)


def walk_selected():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    for i, item in enumerate(RL.Selection()):
        if i:
            robot.MoveL(item)
        else:
            robot.MoveJ(item)
    reset()


def linear_to_selected():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    for i, item in enumerate(RL.Selection()):
        robot.MoveL(item)

    reset()


def pose_info():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    robot_joints = robot.Joints()
    robot_position = robot.SolveFK(robot_joints)
    robot_config = robot.JointsConfig(robot_joints)

    logger.debug("----------------------")
    logger.debug("JOINTS")
    logger.debug(robot_joints)
    logger.debug("POSITION")
    logger.debug(robot_position)
    logger.debug("CONFIG")
    logger.debug(robot_config)
    logger.debug("----------------------")


def _get_joints_info(target):
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    robot.setPose(target.Pose())
    # joints =
    # joints = robot.SolveIK(target.Pose())
    config = robot.JointsConfig(joints)
    return (joints, config)


def linear_move_check():
    robot = RL.Item('', ITEM_TYPE_ROBOT)
    items = RL.Selection()
    nitems = len(items)

    # items = RL.Selection()
    if len(items) == 2:
        logger.debug("-----------MOVEL_TEST----------")
        logger.debug("2 Items")
        # src_joints, src_config = _get_joints_info(items[0])
        src_joints = items[0].Joints()
        pose = items[1].Pose()
        logger.debug(src_joints)
        result = robot.MoveL_Test(src_joints, pose)
        logger.debug("LINEAR POSSIBLE")
        logger.debug(result)
    else:
        logger.debug("Wrong Number Items %d" % len(items))
    # for i, item in enumerate(RL.Selection()):
    #     if i < (nitems-1):
    #         next_item = items[(i+1)]
    #         src_joints, src_config = _get_joints_info(item)
    #         dest_joints, dest_config = _get_joints_info(next_item)

    #         logger.debug("-------COMPARE--------")
    #         logger.debug(item.Name())
    #         logger.debug(src_config)
    #         logger.debug(next_item.Name())
    #         logger.debug(dest_config)
    #         if src_config == dest_config:
    #             logger.debug("MATCH!!")
    #         else:
    #             logger.debug("NOT MATCH :(")

    #         logger.debug("---------------")


def tools():

    root = tk.Tk()
    root.title("Tools")
    tk.Button(root, text='Home', command=go_home).pack()
    tk.Button(root, text='Canvas approach', command=go_canvas_approach).pack()

    tk.Button(root, text='Print selection', command=print_selection).pack()
    tk.Button(root, text='Import model', command=import_model).pack()

    tk.Button(root, text='Walk selected targets', command=walk_selected).pack()
    tk.Button(root, text='Linear move to selected',
              command=linear_to_selected).pack()

    tk.Button(root, text='CurrentPoseInfo',
              command=pose_info).pack()

    tk.Button(root, text='Linear Possible',
              command=linear_move_check).pack()

    # Important to display the graphical user interface
    root.mainloop()


# /usr/local/bin/python3.6
# /Users/julian/bin/subl -n -w
