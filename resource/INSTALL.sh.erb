#!/bin/bash

#TODO - rewrite in ruby

# INSTALL script for bash
# Write lines at the bottom of bashrc to source the env.sh file

 # ensure absolute path to this file and other useful places
rootdir=`dirname $0`
rootdir=`cd $rootdir && pwd`   
basefn=`basename $0`

full_path_to_this_script=${rootdir}/${basefn}
echo "full path to script : ${full_path_to_this_script}"

tools=$(dirname $(dirname $(dirname $(dirname $full_path_to_this_script))))
product_version=$(basename $(dirname $(dirname $full_path_to_this_script)))
product=$(basename $(dirname $(dirname $(dirname $full_path_to_this_script))))
product_install_dir=${tools}/${product}
product_up=`echo $product | tr '[a-z]' '[A-Z]'`

echo "**************************************************************" 
echo ""

echo  "working from : ${tools}"
pushd ${tools}

echo ${product}" install directory is: ${product_install_dir}"

the_product_dir=${product_install_dir}/${product_version}

#################################################################
###### nasty hack alert! write maya module file if maya directory exists.
# Why nasty hack? Because this file shouldn't need to know anything about maya or any app.
# However, since maya's relative module mechanism is broken (linux 2015) and pre 2013
# we need to ensure the module path is absolute and set at install time, not build time.
######
mayadir=${the_product_dir}/maya
if [ -d ${mayadir} ]; then
+ <%= settings[:product_name]%> <%= settings[:product_revision]%> <%= settings[:revision_directory]%>/maya
	echo "+ ${product} ${product_version} ${mayadir}" > ${mayadir}/module.mod
fi
#################################################################




# setup for both sh and csh ...
# remove old entries for this tool.
# remove blank lines at top of .flak file.
flaksh=${tools}/flak.sh
if [ -f ${flaksh} ]; then
	cp  ${flaksh}  ${flaksh}.${product}.bck
	cat ${flaksh}.${product}.bck | grep -v "#.*added by ${product}" | sed '/./,$!d' > ${flaksh}
	rm -rf ${flaksh}.${product}.bck
else
	touch ${flaksh}
fi


sentinel="# added by ${product}"
# add source product env lines to .flak.sh
echo "appending ${product} source commands to ${flaksh}"
echo ""  >> ${flaksh}
echo "# The following lines have been added by ${product}"  >> ${flaksh}
echo 'export '${product_up}'_PROJECT_PATH="'${the_product_dir}'" '${sentinel} >> ${flaksh}
echo '[[ -e "${'${product_up}'_PROJECT_PATH}/config/env.sh" ]] && . "${'${product_up}'_PROJECT_PATH}/config/env.sh" '${sentinel} >>  ${flaksh}

echo ""
echo "********************" 
echo ""
echo "If using bash, make sure you source ${flaksh} from .bashrc"
echo ""
echo "**************************************************************" 


flaksh=${tools}/flak.csh
if [ -f ${flaksh} ]; then
	cp  ${flaksh}  ${flaksh}.${product}.bck
	cat ${flaksh}.${product}.bck | grep -v "#.*added by ${product}" | sed '/./,$!d' > ${flaksh}
	rm -rf ${flaksh}.${product}.bck
else
	touch ${flaksh}
fi

# add source product env lines to flak.csh
echo "appending ${product} source commands to ${flaksh}"
echo ""  >> ${flaksh}
echo "# The following lines have been added by ${product}"  >> ${flaksh}
echo 'setenv '${product_up}'_PROJECT_PATH "'${the_product_dir}'" '${sentinel} >> ${flaksh}
echo 'if( -e "${'${product_up}'_PROJECT_PATH}/config/env.csh" ) then '${sentinel} >>  ${flaksh}
echo '    source "${'${product_up}'_PROJECT_PATH}/config/env.csh" '${sentinel} >>  ${flaksh}
echo 'endif '${sentinel} >>  ${flaksh}
echo ""
echo "********************" 
echo ""
echo "If using csh or tcsh, make sure you source ${flaksh} from .cshrc or tcshrc"
echo ""
echo "**************************************************************" 

popd


